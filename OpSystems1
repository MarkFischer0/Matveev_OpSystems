using System;
using System.IO;
using System.Text.Json;
using System.Threading.Tasks;
using System.Collections.Generic;
using System.Xml;
using System.IO.Compression;

namespace ConsoleApp5
{
    class Person
    {
        public string Name { get; set; }
        public int Age { get; set; }
    }


    class Program
    {
        static async Task Main(string[] args)
        {
            bool i = true;
            Console.WriteLine("Введите номер задания: ");
            while (i == true)
            {

                switch (Convert.ToInt32(Console.ReadLine()))
                {
                    case 1:
                        {
                            DriveInfo[] drives = DriveInfo.GetDrives();
                            foreach (DriveInfo drive in drives)
                            {
                                Console.WriteLine($"Название: {drive.Name}");
                                Console.WriteLine($"Тип: {drive.DriveType}");
                                if (drive.IsReady)
                                {
                                    Console.WriteLine($"Объемдиска: {drive.TotalSize}");
                                    Console.WriteLine($"Свободноепространство: {drive.TotalFreeSpace}");
                                    Console.WriteLine($"Метка: {drive.VolumeLabel}");
                                }
                                Console.WriteLine();
                            }
                            break;
                        }
                    case 2:
                        {
                            string path = @"C:\OSdir";
                            DirectoryInfo dirInfo = new DirectoryInfo(path);
                            if (!dirInfo.Exists)
                            {
                                dirInfo.Create();
                            }
                            Console.WriteLine("Введите строку для записи в файл:");
                            string text = Console.ReadLine();

                            using (FileStream fstream = new FileStream($"{path}\\note.txt", FileMode.OpenOrCreate))
                            {
                                byte[] array = System.Text.Encoding.Default.GetBytes(text);
                                fstream.Write(array, 0, array.Length);
                                Console.WriteLine("Текст записан в файл");
                            }

                            using (FileStream fstream = File.OpenRead($"{path}\\note.txt"))
                            {
                                byte[] array = new byte[fstream.Length];
                                fstream.Read(array, 0, array.Length);
                                string textFromFile = System.Text.Encoding.Default.GetString(array);
                                Console.WriteLine($"Текст из файла: {textFromFile}");
                            }

                            path = @"C:\OSdir\note.txt";
                            FileInfo fileInf = new FileInfo(path);
                            if (fileInf.Exists)
                            {
                                fileInf.Delete();
                            }

                            break;
                        }
                    case 3:
                        {
                            using (FileStream fs = new FileStream("user.json", FileMode.OpenOrCreate))
                            {
                                Person tom = new Person() { Name = "Tom", Age = 35 };
                                await JsonSerializer.SerializeAsync<Person>(fs, tom);
                                Console.WriteLine("Data has been saved to file");
                            }

                            using (FileStream fs = new FileStream("user.json", FileMode.OpenOrCreate))
                            {
                                Person restoredPerson = await JsonSerializer.DeserializeAsync<Person>(fs);
                                Console.WriteLine($"Name: {restoredPerson.Name}  Age: {restoredPerson.Age}");
                            }

                            break;
                        }
                    case 4:
                        {
                            XmlDocument xDoc = new XmlDocument();
                            xDoc.Load("C://users.xml");
                            XmlElement xRoot = xDoc.DocumentElement;
                            foreach (XmlNode xnode in xRoot)
                            {
                                if (xnode.Attributes.Count > 0)
                                {
                                    XmlNode attr = xnode.Attributes.GetNamedItem("name");
                                    if (attr != null)
                                        Console.WriteLine(attr.Value);
                                }
                                foreach (XmlNode childnode in xnode.ChildNodes)
                                {
                                    if (childnode.Name == "company")
                                    {
                                        Console.WriteLine($"Компания: {childnode.InnerText}");
                                    }
                                    if (childnode.Name == "age")
                                    {
                                        Console.WriteLine($"Возраст: {childnode.InnerText}");
                                    }
                                }
                                Console.WriteLine();
                            }
                            break;


                        }
                    case 5:
                        {
                            string sourceFile = "B://archPath/text.txt";
                            string compressedFile = "B://archPath/text.gz";
                            string targetFile = "B://archPath/text_new.txt";

                            Compress(sourceFile, compressedFile);

                            Decompress(compressedFile, targetFile);


                            static void Compress(string sourceFile, string compressedFile)
                            {

                                using (FileStream sourceStream = new FileStream(sourceFile, FileMode.OpenOrCreate))
                                {

                                    using (FileStream targetStream = File.Create(compressedFile))
                                    {

                                        using (GZipStream compressionStream = new GZipStream(targetStream, CompressionMode.Compress))
                                        {
                                            sourceStream.CopyTo(compressionStream);
                                            Console.WriteLine("Сжатие файла {0} завершено. Исходный размер: {1}  сжатый размер: {2}.",
                                            sourceFile, sourceStream.Length.ToString(), targetStream.Length.ToString());
                                        }
                                    }
                                }
                            }

                            static void Decompress(string compressedFile, string targetFile)
                            {

                                using (FileStream sourceStream = new FileStream(compressedFile, FileMode.OpenOrCreate))
                                {

                                    using (FileStream targetStream = File.Create(targetFile))
                                    {

                                        using (GZipStream decompressionStream = new GZipStream(sourceStream, CompressionMode.Decompress))
                                        {
                                            decompressionStream.CopyTo(targetStream);
                                            Console.WriteLine("Восстановлен файл: {0}", targetFile);
                                        }
                                    }
                                }
                            }
                            break;
                        }
                    case 6:
                        {
                            i = false;
                            break;
                        }
                }

            }
        }
    }
}
